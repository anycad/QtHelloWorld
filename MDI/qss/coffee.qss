.QWidget {
   background-color: rgb(50,50,50);
   border: 1px solid rgb(50,50,50);
}

/* Dock */
 QDockWidget {
	 color: white;
 }

 QDockWidget::title {
     text-align: left; /* align the text to the left */
     background: rgb(50,50,50);
     padding-left: 5px;
	 border: 4px solid rgb(50,50,50);
 }

 QDockWidget::close-button, QDockWidget::float-button {
     border: 1px solid transparent;
     background: transparent;
     padding: 0px;
 }

 QDockWidget::close-button:hover, QDockWidget::float-button:hover {
     background: wheat;
 }

 QDockWidget::close-button:pressed, QDockWidget::float-button:pressed {
     padding: 1px -1px -1px 1px;
 }

 /* Menu */
  QMenu {
     background-color: lightgray; /* sets background of the menu */
     border: 1px solid black;
 }

 QMenu::item {
     /* sets background of menu item. set this to something non-transparent
         if you want menu color and menu item color to be different */
     background-color: transparent;
 }

 QMenu::item:selected { /* when user selects item using mouse or keyboard */
     background-color: #654321;
 }

 /* MenuBar */
  QMenuBar {
     background-color: rgb(50,50,50);
	 color: white;
	 min-height: 20px
 }

 QMenuBar::item {
     spacing: 3px; /* spacing between menu bar items */
     padding: 1px 4px;
     background: transparent;
	 border-top-left-radius: 4px;
     border-top-right-radius: 4px;
 }

 QMenuBar::item:selected { /* when selected using mouse or keyboard */
     background: #a8a8a8;
 }

 QMenuBar::item:pressed {
     background: #888888;
 }

 /* ToolBar */
  QToolBar {
     background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                       stop:0 rgb(50,50,50), stop:1 rgb(50,50,50));
     spacing: 3px; /* spacing between items in the tool bar */
	 border: 1px solid rgb(80,80,80)
 }

 /* Tab */

 QTabWidget::pane { /* The tab widget frame */
     border-top: 2px solid #C2C7CB;
	 background: rgb(50,50,50);
 }

 QTabWidget::tab-bar {
     left: 5px; /* move to the right by 5px */
	 background: rgb(50,50,50);
 }

 QTabBar{
	background: rgb(50,50,50);
 }

 QTabBar::close-buttion{
	image: url(:/images/checkbox_unchecked.png);
	subcontrol-position: left;
 }
 /* Style the tab using the tab sub-control. Note that
     it reads QTabBar _not_ QTabWidget */
 QTabBar::tab {
     /*background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                       stop:0 white, stop:1 lightgray);
     border: 1px solid rgb(50,50,50);									   
									   */
	 background: rgb(50,50,50);
     border: 1px solid rgb(50,50,50);
	 color: white;
	 /*
     border-top-left-radius: 4px;
     border-top-right-radius: 4px;
	 */
     min-width: 8ex;
     padding: 2px;
	 margin-top: 2px;
 }

 QTabBar::tab:hover {
	border-color: lightgray;
    background: darkgray;
 }

 QTabBar::tab:selected {
     background: darkgray;/* qlineargradient(x1:0, y1:0, x2:0, y2:1,
                                       stop:0 wheat, stop:1 white);*/
     border-color: lightgray;
	 color: black;
 }

 /* toolbox */
 QToolBox{
	background: rgb(50,50,50);
 }

 QToolBox::tab
 {
	 background: rgb(50,50,50);
     border: 1px solid rgb(80,80,80);
     padding: 1px;
	 color: white
 }

  QToolBox::tab:hover {
	border-color: darkgray;
    background: lightgray;
 }

 QToolBox::tab:selected {
     background: darkgray;
     border-color: lightgray;
	 color: black
 }

  /* QStatusBar */
 QStatusBar {
     background-color: rgb(50,50,50);
	 color: white;
 }

 QStatusBar::item {
     border: 1px solid red;
     border-radius: 3px;
 }

 QDialog {
	background-color: rgb(50,50,50);
	color: white;
 }

/* Nice Windows-XP-style password character. */
QLineEdit[echoMode="2"] {
    lineedit-password-character: 9679;
}

/* Customize push buttons and comboboxes. Our read-only combobox
   is very similar to a push button, so they share the same border image. */

QPushButton {
    min-width: 4em;
}

QPushButton, QComboBox[editable="false"],
QComboBox[editable="true"]::drop-down {
    border-image: url(:/images/pushbutton.png) 5;
    border-width: 5;
}

QPushButton:hover, QComboBox[editable="false"]:hover,
QComboBox[editable="true"]::drop-down:hover, QMenuBar::item:hover {
    border-image: url(:/images/pushbutton_hover.png) 5;
    border-width: 5;
}

QPushButton:pressed, QComboBox[editable="false"]:on,
QComboBox[editable="true"]::drop-down:on, QMenuBar::item:on {
    border-image: url(:/images/pushbutton_pressed.png) 5;
    border-width: 5;
}

/* Bold text on status bar looks awful. */
QStatusBar QLabel {
   font: normal;
}

QStatusBar::item {
    border-width: 1;
    border-color: darkkhaki;
    border-style: solid;
    border-radius: 2;
}

QComboBox, QLineEdit, QSpinBox, QListView, QTreeView {
    background-color: rgb(60,60,60);
	color: white;
    selection-color: #0a214c; 
    selection-background-color: #C19A6B;
	
}

 QTreeView::branch:has-siblings:!adjoins-item {
     border-image: url(:/imgtree/vline.png) 0;
 }

 QTreeView::branch:has-siblings:adjoins-item {
     border-image: url(:/imgtree/branch-more.png) 0;
 }

 QTreeView::branch:!has-children:!has-siblings:adjoins-item {
     border-image: url(:/imgtree/branch-end.png) 0;
 }

 QTreeView::branch:has-children:!has-siblings:closed,
 QTreeView::branch:closed:has-children:has-siblings {
         border-image: none;
         image: url(:/imgtree/branch-closed.png);
 }

 QTreeView::branch:open:has-children:!has-siblings,
 QTreeView::branch:open:has-children:has-siblings  {
         border-image: none;
         image: url(:/imgtree/branch-open.png);
 }

 QTreeView::item:selected {
     background: rgb(80,80,80);
	 color: white;
 }

 QTreeView::item:selected:active{
     background: rgb(80,80,80);
	 color: white;
 }

 QTreeView::item:selected:!active {
     background: rgb(70,70,70);
	 color: white;
 }

 QListView::item:selected {
     background: rgb(80,80,80);
	 color: white;
 }

 QListView::item:selected:active{
     background: rgb(80,80,80);
	 color: white;
 }

 QListView::item:selected:!active {
     background: rgb(70,70,70);
	 color: white;
 }

/*
QTextEdit {
    background-color: rgb(60,60,60);
	color: white;
    selection-color: #0a214c; 
    selection-background-color: #C19A6B;
}
*/

/*
QListView::item:hover {
    background-color: wheat;
}
*/

/* We reserve 1 pixel space in padding. When we get the focus,
   we kill the padding and enlarge the border. This makes the items
   glow. */
QLineEdit, QFrame {
    padding: 1px;
    border-style: solid;
}

/* As mentioned above, eliminate the padding and increase the border. */
QLineEdit:focus, QFrame:focus {
    padding: 1px;
	border-color: rgb(100,100,100);
}

/* A QLabel is a QFrame ... */
QLabel {
    border: none;
    padding: 0;
    background: none;
	color: white;
}

/* A QToolTip is a QLabel ... */
/*
QToolTip {
    border: 2px solid darkkhaki;
    padding: 5px;
    border-radius: 3px;
    opacity: 200;
}
*/

/* Nice to have the background color change when hovered. */
QRadioButton:hover, QCheckBox:hover {
    background-color: wheat;
}

/* Force the dialog's buttons to follow the Windows guidelines. */
QDialogButtonBox {
    button-layout: 0;
}

QMainWindow::separator {
     background: rgb(60,60,60);
     width: 4px; /* when vertical */
     height: 4px; /* when horizontal */
 }

 QMainWindow::separator:hover {
     background: rgb(40,40,40);
 }

 QScrollBar:horizontal {
     background: rgb(50,50,50);
 }
 QScrollBar:vertical {
     background: rgb(50,50,50);
 }